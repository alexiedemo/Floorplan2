yaml
workflows:
  ios-workflow:
    name: iOS Workflow
    max_build_duration: 120
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: codemagic_app_store_connect
    environment:
      cocoapods: default
      xcode: 15.1
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.yourname.lidarroomscanner
    cache:
      cache_paths:
        - $HOME/.cocoapods
        - $HOME/Library/Caches/CocoaPods
    scripts:
      - name: Check Xcode version
        script: |
          xcode-select --print-path
          xcodebuild -version
      - name: Set up provisioning profiles
        script: |
          echo "Setting up provisioning profiles..."
          # List available profiles for debugging
          find ~/Library/MobileDevice/Provisioning\ Profiles -name "*.mobileprovision" -exec security cms -D -i {} \; | grep -A1 -B2 -i "application-identifier\|name\|team-identifier" || true
      - name: Set up code signing settings on Xcode project
        script: |
          echo "Setting up code signing for bundle ID: com.yourname.lidarroomscanner"
          # Find the actual .xcodeproj file
          PROJECT_FILE=$(find . -name "*.xcodeproj" | head -n 1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "No .xcodeproj file found, creating new project structure"
            # Create a basic Xcode project structure if needed
            mkdir -p LiDARRoomScanner.xcodeproj
          else
            echo "Found project file: $PROJECT_FILE"
          fi
          
          # Set manual code signing
          /usr/libexec/PlistBuddy -c "Set :objects:PRODUCT_BUNDLE_IDENTIFIER com.yourname.lidarroomscanner" "$PROJECT_FILE/project.pbxproj" || true
          /usr/libexec/PlistBuddy -c "Set :objects:DEVELOPMENT_TEAM $APP_STORE_CONNECT_ISSUER_ID" "$PROJECT_FILE/project.pbxproj" || true
      - name: Install CocoaPods dependencies (if needed)
        script: |
          if [ -f "Podfile" ]; then
            echo "Installing CocoaPods dependencies..."
            pod install
          else
            echo "No Podfile found, skipping CocoaPods installation"
          fi
      - name: Build ipa for distribution
        script: |
          echo "Building iOS app..."
          
          # Find project or workspace
          if [ -f "*.xcworkspace" ]; then
            WORKSPACE=$(find . -name "*.xcworkspace" | head -n 1)
            echo "Building workspace: $WORKSPACE"
            xcodebuild -workspace "$WORKSPACE" \
              -scheme "LiDARRoomScanner" \
              -configuration Release \
              -destination generic/platform=iOS \
              -archivePath build/LiDARRoomScanner.xcarchive \
              archive \
              CODE_SIGN_IDENTITY="iPhone Distribution" \
              PROVISIONING_PROFILE_SPECIFIER="$CM_PROVISIONING_PROFILE" \
              DEVELOPMENT_TEAM="$APP_STORE_CONNECT_ISSUER_ID" \
              PRODUCT_BUNDLE_IDENTIFIER="com.yourname.lidarroomscanner"
          else
            PROJECT_FILE=$(find . -name "*.xcodeproj" | head -n 1)
            echo "Building project: $PROJECT_FILE"
            xcodebuild -project "$PROJECT_FILE" \
              -scheme "LiDARRoomScanner" \
              -configuration Release \
              -destination generic/platform=iOS \
              -archivePath build/LiDARRoomScanner.xcarchive \
              archive \
              CODE_SIGN_IDENTITY="iPhone Distribution" \
              PROVISIONING_PROFILE_SPECIFIER="$CM_PROVISIONING_PROFILE" \
              DEVELOPMENT_TEAM="$APP_STORE_CONNECT_ISSUER_ID" \
              PRODUCT_BUNDLE_IDENTIFIER="com.yourname.lidarroomscanner"
          fi
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath build/LiDARRoomScanner.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist
    artifacts:
      - build/*.ipa
      - build/LiDARRoomScanner.xcarchive
      - /tmp/xcodebuild_logs/*.log
    publishing:
      email:
        recipients:
          - your_email@example.com
        notify:
          success: true
          failure: true
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testing
        submit_to_app_store: false